// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/signup.proto

package onboarding

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "m3o.dev/platform/service/api"
	client "m3o.dev/platform/service/client"
	server "m3o.dev/platform/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Signup service

func NewSignupEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Signup service

type SignupService interface {
	// Sends the verification email to the user
	User(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	// Verifies and completes signup process
	Verify(ctx context.Context, in *VerifyRequest, opts ...client.CallOption) (*VerifyResponse, error)
	Recover(ctx context.Context, in *RecoverRequest, opts ...client.CallOption) (*RecoverResponse, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...client.CallOption) (*ResetPasswordResponse, error)
	Track(ctx context.Context, in *TrackRequest, opts ...client.CallOption) (*TrackResponse, error)
	Waitlist(ctx context.Context, in *WaitlistRequest, opts ...client.CallOption) (*WaitlistResponse, error)
}

type signupService struct {
	c    client.Client
	name string
}

func NewSignupService(name string, c client.Client) SignupService {
	return &signupService{
		c:    c,
		name: name,
	}
}

func (c *signupService) User(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "Signup.User", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signupService) Verify(ctx context.Context, in *VerifyRequest, opts ...client.CallOption) (*VerifyResponse, error) {
	req := c.c.NewRequest(c.name, "Signup.Verify", in)
	out := new(VerifyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signupService) Recover(ctx context.Context, in *RecoverRequest, opts ...client.CallOption) (*RecoverResponse, error) {
	req := c.c.NewRequest(c.name, "Signup.Recover", in)
	out := new(RecoverResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signupService) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...client.CallOption) (*ResetPasswordResponse, error) {
	req := c.c.NewRequest(c.name, "Signup.ResetPassword", in)
	out := new(ResetPasswordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signupService) Track(ctx context.Context, in *TrackRequest, opts ...client.CallOption) (*TrackResponse, error) {
	req := c.c.NewRequest(c.name, "Signup.Track", in)
	out := new(TrackResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signupService) Waitlist(ctx context.Context, in *WaitlistRequest, opts ...client.CallOption) (*WaitlistResponse, error) {
	req := c.c.NewRequest(c.name, "Signup.Waitlist", in)
	out := new(WaitlistResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Signup service

type SignupHandler interface {
	// Sends the verification email to the user
	User(context.Context, *UserRequest, *UserResponse) error
	// Verifies and completes signup process
	Verify(context.Context, *VerifyRequest, *VerifyResponse) error
	Recover(context.Context, *RecoverRequest, *RecoverResponse) error
	ResetPassword(context.Context, *ResetPasswordRequest, *ResetPasswordResponse) error
	Track(context.Context, *TrackRequest, *TrackResponse) error
	Waitlist(context.Context, *WaitlistRequest, *WaitlistResponse) error
}

func RegisterSignupHandler(s server.Server, hdlr SignupHandler, opts ...server.HandlerOption) error {
	type signup interface {
		User(ctx context.Context, in *UserRequest, out *UserResponse) error
		Verify(ctx context.Context, in *VerifyRequest, out *VerifyResponse) error
		Recover(ctx context.Context, in *RecoverRequest, out *RecoverResponse) error
		ResetPassword(ctx context.Context, in *ResetPasswordRequest, out *ResetPasswordResponse) error
		Track(ctx context.Context, in *TrackRequest, out *TrackResponse) error
		Waitlist(ctx context.Context, in *WaitlistRequest, out *WaitlistResponse) error
	}
	type Signup struct {
		signup
	}
	h := &signupHandler{hdlr}
	return s.Handle(s.NewHandler(&Signup{h}, opts...))
}

type signupHandler struct {
	SignupHandler
}

func (h *signupHandler) User(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.SignupHandler.User(ctx, in, out)
}

func (h *signupHandler) Verify(ctx context.Context, in *VerifyRequest, out *VerifyResponse) error {
	return h.SignupHandler.Verify(ctx, in, out)
}

func (h *signupHandler) Recover(ctx context.Context, in *RecoverRequest, out *RecoverResponse) error {
	return h.SignupHandler.Recover(ctx, in, out)
}

func (h *signupHandler) ResetPassword(ctx context.Context, in *ResetPasswordRequest, out *ResetPasswordResponse) error {
	return h.SignupHandler.ResetPassword(ctx, in, out)
}

func (h *signupHandler) Track(ctx context.Context, in *TrackRequest, out *TrackResponse) error {
	return h.SignupHandler.Track(ctx, in, out)
}

func (h *signupHandler) Waitlist(ctx context.Context, in *WaitlistRequest, out *WaitlistResponse) error {
	return h.SignupHandler.Waitlist(ctx, in, out)
}
